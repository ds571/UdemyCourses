{"version":3,"sources":["app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/TextInput.tsx","app/common/form/ErrorMessage.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","app/models/activity.ts","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/DateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","app/layout/LoadingComponent.tsx","features/activities/details/ActivityDetails.tsx","app/layout/NotFound.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileDescription.tsx","features/profiles/ProfileCard.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","toast","status","data","history","push","includes","removeItem","info","method","errors","hasOwnProperty","responseBody","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","list","params","details","id","create","activity","update","attend","unattend","current","login","user","register","username","uploadPhoto","photo","setMainPhoto","deletePhoto","updateProfile","profile","follow","unfollow","listFollowings","predicate","listActivities","setActivityProps","date","Date","isGoing","attendees","some","a","isHost","createAttendee","displayName","image","ActivityStore","observable","ref","rootStore","getActivity","activityRegistry","this","reaction","keys","page","runInAction","clear","loadActivities","activities","sortedActivities","sort","b","getTime","Object","entries","reduce","toISOString","split","URLSearchParams","String","forEach","value","key","Math","ceil","activityCount","groupActivitiesByDate","Array","from","values","Map","action","set","computed","activityId","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","console","log","state","invoke","catch","on","comment","comments","stop","clearActivity","err","loadingInitial","userStore","agent","axiosParams","activitiesEnvelope","toJS","submitting","attendee","event","target","currentTarget","name","loading","filter","UserStore","setToken","modalStore","closeModal","CommonStore","setItem","appLoaded","ModalStore","shallow","open","content","modal","ProfileStore","activeTab","loadFollowings","followings","userName","loadingActivities","userActivities","activeIndex","loadingProfile","uploadingPhoto","photos","isMain","find","following","followersCount","profiles","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","observer","useContext","logout","Menu","fixed","inverted","Container","Item","header","as","NavLink","exact","to","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","styles","borderColor","borderWidth","ActivityListItemAttendees","List","horizontal","map","Popup","trigger","size","circular","bordered","ActivityListItem","host","x","Segment","Group","marginBottom","Content","Header","title","Description","Label","basic","color","Icon","format","venue","city","secondary","clearing","description","floated","activitiesByDate","group","parse","divided","setPredicate","vertical","width","marginTop","attached","active","has","onChange","ActivityListItemPlaceholder","Placeholder","fluid","minHeight","Line","Paragraph","disabled","setPage","totalPages","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","hasMore","initialLoad","Loader","TextInput","input","type","placeholder","meta","touched","Form","Field","ErrorMessage","Message","statusText","length","flat","i","validate","combineValidators","email","isRequired","password","LoginForm","onSubmit","FORM_ERROR","render","handleSubmit","submitError","invalid","pristine","dirtySinceLastSubmit","textAlign","component","RegisterForm","HomePage","isLoggedIn","openModal","className","ActivityFormValues","init","category","time","assign","TextAreaInput","rows","SelectInput","options","Select","e","DateInput","rest","onBlur","onKeyDown","preventDefault","composeValidators","hasLengthGreaterThan","match","createActivity","editActivity","loadActivity","setActivity","setLoading","finally","initialValues","dateAndTime","dateString","timeString","combineDateAndTime","newActivity","uuid","widths","activityImageStyle","activityImageTextStyle","bottom","left","height","attendActivity","cancelAttendance","padding","ActivityDetailedInfo","verticalAlign","createHubConnection","stopHubConnection","addComment","border","Comment","Avatar","Author","Metadata","createdAt","Text","form","reset","labelPosition","primary","relaxed","ribbon","Extra","LoadingComponent","Dimmer","NotFound","Inline","Modal","onClose","isCurrentUser","Statistic","label","followingCount","Divider","Reveal","animated","visible","hidden","dropzoneStyles","borderRadius","paddingTop","dropzoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropper","useRef","aspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","Row","sub","overflow","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","Card","itemsPerRow","negative","bio","editMode","setEditMode","ProfileCard","extra","ProfileFollowings","panes","menuItem","pane","loadUserActivities","menu","onTabChange","handleTabChange","objectFit","Meta","ProfileActivities","ProfileContent","setActiveTab","menuPosition","loadProfile","PrivateRoute","Component","props","withRouter","location","setAppLoaded","getUser","path","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","Boolean","hostname","children","pathname","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.012ed041.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\nimport { IActivity, IActivitiesEnvelope } from \"../models/activity\";\r\nimport { history } from \"../..\";\r\nimport { toast } from \"react-toastify\";\r\nimport { IUser, IUserFormValues } from \"../models/user\";\r\nimport { IProfile, IPhoto } from \"../models/profile\";\r\n\r\n// Set root api url\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(\r\n  config => {\r\n    const token = window.localStorage.getItem(\"jwt\");\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxios.interceptors.response.use(undefined, error => {\r\n  // When response is fullfilled, when rejected\r\n  if (error.message === \"Network Error\" && !error.response) {\r\n    toast.error(\"Network error - make sure API is running!\");\r\n  }\r\n  const { status, data, config, headers } = error.response;\r\n  if (error.response.status === 404) {\r\n    history.push(\"/notfound\");\r\n  }\r\n  if(status === 401 && headers['www-authenticate'].includes('Bearer error=\"invalid_token')) {\r\n    window.localStorage.removeItem('jwt');\r\n    history.push('/');\r\n    toast.info('Your session has expired, please login again');\r\n  }\r\n  if (\r\n    status === 400 &&\r\n    config.method === \"get\" &&\r\n    data.errors.hasOwnProperty(\"id\")\r\n  ) {\r\n    history.push(\"/notfound\");\r\n  }\r\n  if (status === 500) {\r\n    toast.error(\"Server error - check the terminal for more info!\");\r\n  }\r\n  throw error.response;\r\n});\r\n\r\n// store request in a constant\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\n// Sleep function to mimic real-world response times\r\nconst sleep = (ms: number) => (response: AxiosResponse) =>\r\n  new Promise<AxiosResponse>(resolve =>\r\n    setTimeout(() => resolve(response), ms)\r\n  );\r\n\r\n// create request object\r\nconst requests = {\r\n  get: (url: string) =>\r\n    axios\r\n      .get(url)\r\n      //.then(sleep(1000))\r\n      .then(responseBody),\r\n  post: (url: string, body: {}) =>\r\n    axios\r\n      .post(url, body)\r\n      //.then(sleep(1000))\r\n      .then(responseBody),\r\n  put: (url: string, body: {}) =>\r\n    axios\r\n      .put(url, body)\r\n      //.then(sleep(1000))\r\n      .then(responseBody),\r\n  del: (url: string) =>\r\n    axios\r\n      .delete(url)\r\n      //.then(sleep(1000))\r\n      .then(responseBody),\r\n  postForm: (url: string, file: Blob) => {\r\n    let formData = new FormData();\r\n    formData.append(\"File\", file); // This needs to match what we called our property in IFormFile\r\n    return axios\r\n      .post(url, formData, {\r\n        headers: { \"Content-type\": \"multipart/form-data\" }\r\n      })\r\n      .then(responseBody);\r\n  }\r\n};\r\n\r\n// activities feature\r\nconst Activities = {\r\n  /*\r\n  list: (limit?: number, page?: number): Promise<IActivitiesEnvelope> =>\r\n    requests.get(`/activities?limit=${limit}&offset=${page ? page * limit! : 0}`),*/\r\n  list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\r\n    axios.get('/activities', {params: params})/*.then(sleep(1000))*/.then(responseBody),\r\n  details: (id: string) => requests.get(`/activities/${id}`),\r\n  create: (activity: IActivity) => requests.post(\"/activities\", activity),\r\n  update: (activity: IActivity) =>\r\n    requests.put(`/activities/${activity.id}`, activity),\r\n  delete: (id: string) => requests.del(`/activities/${id}`),\r\n  attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\r\n  unattend: (id: string) => requests.del(`/activities/${id}/attend`)\r\n};\r\n\r\nconst User = {\r\n  current: (): Promise<IUser> => requests.get(\"/user\"),\r\n  login: (user: IUserFormValues): Promise<IUser> =>\r\n    requests.post(`/user/login`, user),\r\n  register: (user: IUserFormValues): Promise<IUser> =>\r\n    requests.post(`/user/register`, user)\r\n};\r\n\r\nconst Profiles = {\r\n  get: (username: string): Promise<IProfile> =>\r\n    requests.get(`/profiles/${username}`),\r\n  uploadPhoto: (photo: Blob): Promise<IPhoto> =>\r\n    requests.postForm(`/photos`, photo),\r\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n  updateProfile: (profile: Partial<IProfile>) =>\r\n    requests.put(`/profiles`, profile),\r\n  follow: (username: string) =>\r\n    requests.post(`/profiles/${username}/follow`, {}),\r\n  unfollow: (username: string) => requests.del(`/profiles/${username}/follow`),\r\n  listFollowings: (username: string, predicate: string) =>\r\n    requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\r\n  listActivities: (username: string, predicate: string) =>\r\n    requests.get(`/profiles/${username}/activities?predicate=${predicate}`)\r\n};\r\n\r\nexport default {\r\n  Activities,\r\n  User,\r\n  Profiles\r\n};\r\n","import { IActivity, IAttendee } from \"../../models/activity\";\r\nimport { IUser } from \"../../models/user\";\r\n\r\nexport const combineDateAndTime = (date: Date, time: Date) => { \r\n    /*\r\n    const timeString = time.getHours() + ':' + time.getMinutes() + ':00';\r\n\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    const dateString = `${year}-${month}-${day}`;\r\n    */\r\n    const dateString = date.toISOString().split('T')[0];\r\n    const timeString = time.toISOString().split('T')[1];\r\n\r\n    return new Date(dateString + 'T' + timeString);\r\n    \r\n    //return new Date(dateString + ' ' + timeString);\r\n};\r\n\r\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\r\n    activity.date = new Date(activity.date);\r\n    activity.isGoing = activity.attendees.some(\r\n        a => a.username === user.username\r\n    ); // is this user attending this particular event\r\n    activity.isHost = activity.attendees.some(\r\n        a => a.username === user.username && a.isHost\r\n    );\r\n    return activity;\r\n};\r\n\r\nexport const createAttendee = (user: IUser): IAttendee => {\r\n    return {\r\n        displayName: user.displayName,\r\n        isHost: false,\r\n        username: user.username,\r\n        image: user.image! // can potentially be null\r\n    }\r\n};","import { observable, action, computed, runInAction, reaction, toJS } from \"mobx\";\r\nimport { SyntheticEvent } from \"react\";\r\nimport { IActivity } from \"../models/activity\";\r\nimport agent from \"../api/agent\";\r\nimport { history } from \"../..\";\r\nimport { toast } from \"react-toastify\";\r\nimport { RootStore } from \"./rootStore\";\r\nimport { setActivityProps, createAttendee } from \"../common/util/util\";\r\nimport {\r\n  HubConnection,\r\n  HubConnectionBuilder,\r\n  LogLevel\r\n} from \"@microsoft/signalr\";\r\n\r\nconst LIMIT = 2;\r\n\r\nexport default class ActivityStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n      // if predicate keys have change, do this:\r\n      () => this.predicate.keys(),\r\n      () => {\r\n        this.page = 0;\r\n        runInAction(() => {\r\n          this.activityRegistry.clear();\r\n          this.loadActivities();\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  @observable activityRegistry = new Map();\r\n  @observable loadingInitial = false;\r\n  @observable activity: IActivity | null = null;\r\n  @observable submitting = false;\r\n  @observable target = \"\";\r\n  @observable loading = false;\r\n  @observable.ref hubConnection: HubConnection | null = null;\r\n  @observable activityCount = 0;\r\n  @observable page = 0;\r\n  @observable predicate = new Map();\r\n\r\n  @action setPredicate = (predicate: string, value: string | Date) => {\r\n    runInAction(() => {\r\n      this.predicate.clear(); // If no predicate, just return all activities\r\n      if (predicate !== \"all\") {\r\n        this.predicate.set(predicate, value);\r\n      }\r\n    });\r\n  };\r\n\r\n  @computed get axiosParams() {\r\n    const params = new URLSearchParams();\r\n    params.append(\"limit\", String(LIMIT));\r\n    params.append(\"offset\", `${this.page ? this.page * LIMIT : 0}`);\r\n    this.predicate.forEach((value, key) => {\r\n      if (key === \"startDate\") {\r\n        params.append(key, value.toISOString());\r\n      } else {\r\n        params.append(key, value);\r\n      }\r\n    });\r\n    return params;\r\n  }\r\n\r\n  @computed get totalPages() {\r\n    return Math.ceil(this.activityCount / LIMIT);\r\n  }\r\n\r\n  @action setPage = (page: number) => {\r\n    runInAction(() => {\r\n      this.page = page;\r\n    });\r\n  };\r\n\r\n  @action createHubConnection = (activityId: string) => {\r\n    this.hubConnection = new HubConnectionBuilder()\r\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\r\n        accessTokenFactory: () => this.rootStore.commonStore.token!\r\n      })\r\n      .configureLogging(LogLevel.Information)\r\n      .build();\r\n\r\n    this.hubConnection\r\n      .start()\r\n      .then(() => {\r\n        runInAction(() => {\r\n          console.log(\"Connection State:\", this.hubConnection!.state);\r\n        });\r\n      })\r\n      .then(() => {\r\n        try {\r\n          runInAction(() => {\r\n            console.log(\"Attempting to join group. activityId: \", activityId);\r\n            this.hubConnection!.invoke(\"AddToGroup\", activityId); // needs to match api method name EXACTLY\r\n          });\r\n        } catch (error) {\r\n          console.log(\"ERROR: \", error);\r\n        }\r\n      })\r\n      .catch(error => console.log(\"Error establishing connection: \", error));\r\n\r\n    // origin runInAction\r\n    this.hubConnection.on(\"ReceiveComment\", comment => {\r\n      runInAction(() => {\r\n        this.activity!.comments.push(comment);\r\n      });\r\n    });\r\n\r\n    this.hubConnection.on(\"Send\", message => {\r\n      toast.info(message);\r\n    });\r\n  };\r\n\r\n  @action stopHubConnection = () => {\r\n    this.hubConnection!.invoke(\"RemoveFromGroup\", this.activity!.id)\r\n      .then(() => {\r\n        runInAction(() => {\r\n          this.hubConnection!.stop();\r\n        });\r\n      })\r\n      .then(() => {\r\n        runInAction(() => {\r\n          this.clearActivity();\r\n        });\r\n        console.log(\"Connection stopped\");\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  @action addComment = async (values: any) => {\r\n    values.activityId = this.activity!.id;\r\n    try {\r\n      await this.hubConnection!.invoke(\"SendComment\", values);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @computed get activitiesByDate() {\r\n    return this.groupActivitiesByDate(\r\n      Array.from(this.activityRegistry.values())\r\n    ); // ascending date order\r\n  }\r\n\r\n  groupActivitiesByDate(activities: IActivity[]) {\r\n    const sortedActivities = activities.sort(\r\n      (a, b) => a.date.getTime() - b.date.getTime()\r\n    );\r\n    return Object.entries(\r\n      sortedActivities.reduce((activities, activity) => {\r\n        const date = activity.date.toISOString().split(\"T\")[0]; // Get date (not the time)\r\n        activities[date] = activities[date]\r\n          ? [...activities[date], activity]\r\n          : [activity]; // Get array for this date and add activity to it, otherwise just add the activity\r\n        return activities;\r\n      }, {} as { [key: string]: IActivity[] })\r\n    );\r\n  }\r\n\r\n  @action loadActivities = async () => {\r\n    this.loadingInitial = true;\r\n    const user = this.rootStore.userStore.user!; // no possiblity that this method is going to be called without user being present\r\n    try {\r\n      const activitiesEnvelope = await agent.Activities.list(\r\n        this.axiosParams /*LIMIT, this.page*/\r\n      ); // block execution of anything  below this until this has been fulfilled\r\n      const { activities, activityCount } = activitiesEnvelope;\r\n      runInAction(\"loading activities\", () => {\r\n        activities.forEach(activity => {\r\n          setActivityProps(activity, user);\r\n          this.activityRegistry.set(activity.id, activity); // mutating state here\r\n        });\r\n        this.activityCount = activityCount;\r\n        this.loadingInitial = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(\"load activities error\", () => {\r\n        console.log(error);\r\n        this.loadingInitial = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadActivity = async (id: string) => {\r\n    let activity = this.getActivity(id);\r\n    if (activity) {\r\n      this.activity = activity;\r\n      return toJS(activity);\r\n    } else {\r\n      this.loadingInitial = true;\r\n      try {\r\n        activity = await agent.Activities.details(id);\r\n        runInAction(\"getting activity\", () => {\r\n          setActivityProps(activity, this.rootStore.userStore.user!);\r\n          this.activity = activity;\r\n          this.activityRegistry.set(activity.id, activity); // mutating state here\r\n          this.loadingInitial = false;\r\n        });\r\n        return activity;\r\n      } catch (error) {\r\n        runInAction(\"get activity error\", () => {\r\n          this.loadingInitial = false;\r\n        });\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  @action clearActivity = () => {\r\n    console.log(\"CLEARING ACTIVITY\");\r\n    this.activity = null;\r\n  };\r\n\r\n  getActivity = (id: string) => {\r\n    // not mutating strings so this is ok\r\n    return this.activityRegistry.get(id);\r\n  };\r\n\r\n  // Create Activity\r\n  @action createActivity = async (activity: IActivity) => {\r\n    this.submitting = true;\r\n    try {\r\n      await agent.Activities.create(activity);\r\n      const attendee = createAttendee(this.rootStore.userStore.user!);\r\n      attendee.isHost = true;\r\n      let attendees = [];\r\n      attendees.push(attendee);\r\n      activity.attendees = attendees;\r\n      activity.comments = [];\r\n      activity.isHost = true;\r\n      runInAction(\"create activity\", () => {\r\n        this.activityRegistry.set(activity.id, activity);\r\n        this.submitting = false;\r\n      });\r\n      history.push(`/activities/${activity.id}`);\r\n    } catch (error) {\r\n      runInAction(\"create activity error\", () => {\r\n        this.submitting = false;\r\n      });\r\n      toast.error(\"Problem submitting data\");\r\n      console.log(error.response);\r\n    }\r\n  };\r\n\r\n  @action editActivity = async (activity: IActivity) => {\r\n    this.submitting = true;\r\n    try {\r\n      await agent.Activities.update(activity);\r\n      runInAction(\"editing activity\", () => {\r\n        this.activityRegistry.set(activity.id, activity);\r\n        this.activity = null;\r\n        this.activity = activity;\r\n        this.submitting = false;\r\n      });\r\n      history.push(`/activities/${activity.id}`);\r\n    } catch (error) {\r\n      runInAction(\"edit activity error\", () => {\r\n        this.submitting = false;\r\n      });\r\n      toast.error(\"Problem submitting data\");\r\n      console.log(error.response);\r\n    }\r\n  };\r\n\r\n  @action deleteActivity = async (\r\n    event: SyntheticEvent<HTMLButtonElement>,\r\n    id: string\r\n  ) => {\r\n    this.submitting = true;\r\n    this.target = event.currentTarget.name;\r\n\r\n    try {\r\n      await agent.Activities.delete(id);\r\n      runInAction(\"deleting activity\", () => {\r\n        this.activityRegistry.delete(id);\r\n        this.submitting = false;\r\n        this.target = \"\";\r\n      });\r\n    } catch (error) {\r\n      runInAction(\"delete activity error\", () => {\r\n        this.submitting = false;\r\n        this.target = \"\";\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action attendActivity = async () => {\r\n    const attendee = createAttendee(this.rootStore.userStore.user!);\r\n    this.loading = true;\r\n    try {\r\n      await agent.Activities.attend(this.activity!.id);\r\n      runInAction(() => {\r\n        if (this.activity) {\r\n          this.activity.attendees.push(attendee);\r\n          this.activity.isGoing = true;\r\n          this.activityRegistry.set(this.activity.id, this.activity);\r\n          this.loading = false;\r\n        }\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n      toast.error(\"Problem signing up to activity\");\r\n    }\r\n  };\r\n\r\n  @action cancelAttendance = async () => {\r\n    try {\r\n      this.loading = true;\r\n      await agent.Activities.unattend(this.activity!.id);\r\n      runInAction(() => {\r\n        if (this.activity) {\r\n          this.activity.attendees = this.activity.attendees.filter(\r\n            a => a.username !== this.rootStore.userStore.user!.username\r\n          );\r\n          this.activity.isGoing = false;\r\n          this.activityRegistry.set(this.activity.id, this.activity);\r\n          this.loading = false;\r\n        }\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n      toast.error(\"Problem cancelling attendance\");\r\n    }\r\n  };\r\n}\r\n","import { observable, computed, action, runInAction } from \"mobx\";\r\nimport { IUser, IUserFormValues } from \"../models/user\";\r\nimport agent from \"../api/agent\";\r\nimport { RootStore } from \"./rootStore\";\r\nimport { history } from \"../..\";\r\n\r\nexport default class UserStore {\r\n\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable user: IUser | null = null;\r\n\r\n    @computed get isLoggedIn() {return !!this.user}\r\n\r\n    @action login = async (values: IUserFormValues) => {\r\n        try{\r\n            const user = await agent.User.login(values);\r\n            runInAction(() => {\r\n                this.user = user;\r\n            });\r\n            this.rootStore.commonStore.setToken(user.token);\r\n            this.rootStore.modalStore.closeModal();\r\n            history.push('/activities');\r\n        }catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @action register = async(values: IUserFormValues) => {\r\n        try{\r\n            const user = await agent.User.register(values);\r\n            this.rootStore.commonStore.setToken(user.token);\r\n            this.rootStore.modalStore.closeModal();\r\n            history.push('/activities');\r\n        } catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @action getUser = async () => {\r\n        try{\r\n            const user = await agent.User.current();\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action logout = () => {\r\n        this.rootStore.commonStore.setToken(null);\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, action, reaction } from \"mobx\";\r\n\r\nexport default class CommonStore {\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore){\r\n        this.rootStore = rootStore;\r\n\r\n        reaction (\r\n            () => this.token,\r\n            token => {\r\n                if(token)\r\n                {\r\n                    window.localStorage.setItem('jwt', token);\r\n                }\r\n                else{\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    @observable token: string | null = window.localStorage.getItem('jwt');\r\n    @observable appLoaded = false;\r\n    \r\n    @action setToken = (token: string | null) => {\r\n        window.localStorage.setItem('jwt', token!);\r\n        this.token = token;\r\n    }\r\n\r\n    @action setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, action } from \"mobx\";\r\n\r\nexport default class ModalStore {\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore){\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable.shallow modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    @action openModal = (content: any) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    @action closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, action, runInAction, computed, reaction } from \"mobx\";\r\nimport { IProfile, IPhoto, IUserActivity } from \"../models/profile\";\r\nimport agent from \"../api/agent\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport default class ProfileStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n      () => this.activeTab,\r\n      activeTab => {\r\n        if(activeTab === 3 || activeTab === 4) {\r\n          const predicate = activeTab === 3 ? 'followers' : 'following';\r\n          this.loadFollowings(predicate);\r\n        } else {\r\n          this.followings = [];\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  @observable profile: IProfile | null = null;\r\n  @observable loadingProfile = true;\r\n  @observable uploadingPhoto = false;\r\n  @observable loading = false;\r\n  @observable followings: IProfile[] = [];\r\n  @observable activeTab: number = 0;\r\n  @observable userActivities: IUserActivity[] = [];\r\n  @observable loadingActivities = false;\r\n\r\n  @computed get isCurrentUser() {\r\n    if (this.rootStore.userStore.user && this.profile) {\r\n      return this.rootStore.userStore.user.username === this.profile.userName;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  @action loadUserActivities = async (username: string, predicate?: string) => {\r\n    this.loadingActivities = true;\r\n    try {\r\n      const activities = await agent.Profiles.listActivities(username, predicate!);\r\n      runInAction(() => {\r\n        this.userActivities = activities;\r\n        this.loadingActivities = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem loading activities');\r\n      runInAction(() => {\r\n        this.loadingActivities = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action setActiveTab = (activeIndex: number) => {\r\n    this.activeTab = activeIndex;\r\n  };\r\n\r\n  @action loadProfile = async (username: string) => {\r\n    this.loadingProfile = true;\r\n    try {\r\n      const profile = await agent.Profiles.get(username);\r\n      // manipulating observables after await\r\n      runInAction(() => {\r\n        this.profile = profile;\r\n        this.loadingProfile = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingProfile = false;\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action uploadPhoto = async (file: Blob) => {\r\n    this.uploadingPhoto = true;\r\n    try {\r\n      const photo = await agent.Profiles.uploadPhoto(file);\r\n      runInAction(() => {\r\n        if (this.profile) {\r\n          this.profile.photos.push(photo);\r\n          if (photo.isMain && this.rootStore.userStore.user) {\r\n            this.rootStore.userStore.user.image = photo.url;\r\n            this.profile.image = photo.url;\r\n          }\r\n          this.uploadingPhoto = false;\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      toast.error(\"Problem uploading photo\");\r\n      runInAction(() => {\r\n        this.uploadingPhoto = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action setMainPhoto = async (photo: IPhoto) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.setMainPhoto(photo.id);\r\n      runInAction(() => {\r\n        this.rootStore.userStore.user!.image = photo.url;\r\n        this.profile!.photos.find(a => a.isMain)!.isMain = false;\r\n        this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\r\n        this.profile!.image = photo.url;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error(\"Problem setting photo as main\");\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action deletePhoto = async (photo: IPhoto) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.deletePhoto(photo.id);\r\n      runInAction(() => {\r\n        this.profile!.photos = this.profile!.photos.filter(\r\n          a => a.id !== photo.id\r\n        ); // return new array of all the photos (except the one that matches the photo id we are passing)\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error(\"Problem deleting the photo\");\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action updateProfile = async (profile: Partial<IProfile>) => {\r\n    try {\r\n      await agent.Profiles.updateProfile(profile);\r\n      runInAction(() => {\r\n        if (\r\n          profile.displayName !== this.rootStore.userStore.user!.displayName\r\n        ) {\r\n          this.rootStore.userStore.user!.displayName = profile.displayName!;\r\n        }\r\n        this.profile = { ...this.profile!, ...profile }; // overwrite profile properties\r\n      });\r\n    } catch (error) {\r\n      toast.error(\"Problem updating profile\");\r\n    }\r\n  };\r\n\r\n  @action follow = async (username: string) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.follow(username);\r\n      runInAction(() => {\r\n        this.profile!.following = true;\r\n        this.profile!.followersCount++;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error(\"Problem following user\");\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action unfollow = async (username: string) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.unfollow(username);\r\n      runInAction(() => {\r\n        this.profile!.following = false;\r\n        this.profile!.followersCount--;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error(\"Problem unfollowing user\");\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadFollowings = async (predicate: string) => {\r\n    this.loading = true;\r\n    try {\r\n      const profiles = await agent.Profiles.listFollowings(\r\n        this.profile!.userName,\r\n        predicate\r\n      );\r\n      runInAction(() => {\r\n        this.followings = profiles;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error(\"Problem loading followings\");\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n}\r\n","import ActivityStore from \"./activityStore\";\r\nimport UserStore from \"./userStore\";\r\nimport { createContext } from \"react\";\r\nimport { configure } from \"mobx\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\n\r\nconfigure({ enforceActions: 'always' });\r\n\r\nexport class RootStore {\r\n    activityStore: ActivityStore;\r\n    userStore: UserStore;\r\n    commonStore: CommonStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n\r\n    constructor() {\r\n        this.activityStore = new ActivityStore(this);\r\n        this.userStore = new UserStore(this);\r\n        this.commonStore = new CommonStore(this);\r\n        this.modalStore = new ModalStore(this);\r\n        this.profileStore = new ProfileStore(this);\r\n    }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore());","import React, { useContext } from \"react\";\r\nimport { Menu, Container, Button, Dropdown, Image } from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\n\r\nconst NavBar: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { user, logout } = rootStore.userStore;\r\n\r\n  return (\r\n    <Menu fixed=\"top\" inverted>\r\n      <Container>\r\n        <Menu.Item header as={NavLink} exact to=\"/\">\r\n          <img\r\n            src=\"/assets/logo.png\"\r\n            alt=\"logo\"\r\n            style={{ marginRight: \"10px\" }}\r\n          />\r\n          Reactivities\r\n        </Menu.Item>\r\n        <Menu.Item name=\"Activities\" as={NavLink} to=\"/activities\" />\r\n        <Menu.Item>\r\n          <Button\r\n            as={NavLink}\r\n            to=\"/createActivity\"\r\n            positive\r\n            content=\"Create Activity\"\r\n          />\r\n        </Menu.Item>\r\n        {user && (\r\n          <Menu.Item position=\"right\">\r\n            <Image\r\n              avatar\r\n              spaced=\"right\"\r\n              src={user.image || \"/assets/user.png\"}\r\n            />\r\n            <Dropdown pointing=\"top left\" text={user.displayName}>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  as={Link}\r\n                  to={`/profile/${user.username}`}\r\n                  text=\"My profile\"\r\n                  icon=\"user\"\r\n                />\r\n                <Dropdown.Item onClick={logout} text=\"Logout\" icon=\"power\" />\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Menu.Item>\r\n        )}\r\n      </Container>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default observer(NavBar);\r\n","import React from \"react\";\r\nimport { List, Image, Popup } from \"semantic-ui-react\";\r\nimport { IAttendee } from \"../../../app/models/activity\";\r\n\r\ninterface IProps {\r\n  attendees: IAttendee[];\r\n}\r\n\r\nconst styles = {\r\n  borderColor: 'orange',\r\n  borderWidth: 2\r\n};\r\n\r\n// Since adding interface, choose 2nd implementation:\r\n//export const ActivityListItemAttendees = () => {\r\nexport const ActivityListItemAttendees: React.FC<IProps> = ({ attendees }) => {\r\n  return (\r\n    <List horizontal>\r\n      {attendees.map(attendee => (\r\n        <List.Item key={attendee.username}>\r\n          <Popup\r\n            header={attendee.username}\r\n            trigger={\r\n              <Image\r\n                size=\"mini\"\r\n                circular\r\n                src={attendee.image || \"/assets/user.png\"}\r\n                bordered\r\n                style={attendee.following ? styles : null}\r\n              />\r\n            }\r\n          />\r\n        </List.Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Item, Button, Segment, Icon, Label } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IActivity } from \"../../../app/models/activity\";\r\nimport { format } from \"date-fns\";\r\nimport { ActivityListItemAttendees } from \"./ActivityListItemAttendees\";\r\n\r\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({ activity }) => {\r\n  const host = activity.attendees.filter(x => x.isHost)[0];\r\n  return (\r\n    <Segment.Group>\r\n      <Segment>\r\n        <Item.Group>\r\n          <Item>\r\n            <Item.Image\r\n              size=\"tiny\"\r\n              circular\r\n              src={host.image || \"/assets/user.png\"}\r\n              style={{ marginBottom: 3 }}\r\n            />\r\n            <Item.Content>\r\n              <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                {activity.title}\r\n              </Item.Header>\r\n              <Item.Description>\r\n                Hosted by\r\n                <Link to={`/profile/${host.username}`}> {host.displayName}</Link>\r\n              </Item.Description>\r\n              {activity.isHost && (\r\n                <Item.Description>\r\n                  <Label\r\n                    basic\r\n                    color=\"orange\"\r\n                    content=\"You are hosting this activity\"\r\n                  />{\" \"}\r\n                </Item.Description>\r\n              )}\r\n              {activity.isGoing && !activity.isHost && (\r\n                <Item.Description>\r\n                  <Label\r\n                    basic\r\n                    color=\"green\"\r\n                    content=\"You are going to this activity\"\r\n                  />{\" \"}\r\n                </Item.Description>\r\n              )}\r\n            </Item.Content>\r\n          </Item>\r\n        </Item.Group>\r\n      </Segment>\r\n      <Segment>\r\n        <Icon name=\"clock\" /> {format(activity.date, \"h:mm a\")}\r\n        <Icon name=\"marker\" /> {activity.venue}, {activity.city}\r\n      </Segment>\r\n      <Segment secondary>\r\n        <ActivityListItemAttendees attendees={activity.attendees} />\r\n      </Segment>\r\n      <Segment clearing>\r\n        <span>{activity.description}</span>\r\n        <Button\r\n          as={Link}\r\n          to={`/activities/${activity.id}`}\r\n          floated=\"right\"\r\n          content=\"View\"\r\n          color=\"blue\"\r\n        />\r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n};\r\n\r\nexport default ActivityListItem;\r\n","import React, { useContext, Fragment } from 'react';\r\nimport { Item, Label } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityListItem from './ActivityListItem';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport {format} from 'date-fns';\r\n\r\nconst ActivityList: React.FC = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { activitiesByDate } = rootStore.activityStore;\r\n    return (\r\n        <Fragment>\r\n            {activitiesByDate.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Label size='large' color='blue'>\r\n                        {format(Date.parse(group), 'eeee do MMMM')}\r\n                    </Label>\r\n                    <Item.Group divided>\r\n                        {activities.map(activity => (\r\n                            <ActivityListItem key={activity.id} activity={activity} />\r\n                        ))}\r\n                    </Item.Group>\r\n                </Fragment>\r\n            ))}\r\n        </Fragment>\r\n        )\r\n}\r\n\r\nexport default observer(ActivityList);","import React, { Fragment, useContext } from \"react\";\r\nimport { Menu, Header } from \"semantic-ui-react\";\r\nimport { Calendar } from \"react-widgets\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst ActivityFilters = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { predicate, setPredicate } = rootStore.activityStore;\r\n  return (\r\n    <Fragment>\r\n      <Menu vertical size={\"large\"} style={{ width: \"100%\", marginTop: 50 }}>\r\n        <Header icon={\"filter\"} attached color={\"teal\"} content={\"Filters\"} />\r\n        <Menu.Item\r\n          active={predicate.size === 0}\r\n          onClick={() => setPredicate(\"all\", \"true\")}\r\n          color={\"blue\"}\r\n          name={\"all\"}\r\n          content={\"All Activities\"}\r\n        />\r\n        <Menu.Item\r\n          active={predicate.has(\"isGoing\")}\r\n          onClick={() => setPredicate(\"isGoing\", \"true\")}\r\n          color={\"blue\"}\r\n          name={\"username\"}\r\n          content={\"I'm Going\"}\r\n        />\r\n        <Menu.Item\r\n          active={predicate.has(\"isHost\")}\r\n          onClick={() => setPredicate(\"isHost\", \"true\")}\r\n          color={\"blue\"}\r\n          name={\"host\"}\r\n          content={\"I'm hosting\"}\r\n        />\r\n      </Menu>\r\n      <Header\r\n        icon={\"calendar\"}\r\n        attached\r\n        color={\"teal\"}\r\n        content={\"Select Date\"}\r\n      />\r\n      <Calendar\r\n        onChange={(date) => {\r\n          setPredicate(\"startDate\", date!);\r\n        }}\r\n        value={predicate.get(\"startDate\") || new Date()}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityFilters);\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\nconst ActivityListItemPlaceholder = () => {\r\n  return (\r\n    <Fragment>\r\n      <Placeholder fluid style={{ marginTop: 50 }}>\r\n        <Segment.Group>\r\n          <Segment style={{ minHeight: 110 }}>\r\n            <Placeholder>\r\n              <Placeholder.Header image>\r\n                <Placeholder.Line />\r\n                <Placeholder.Line />\r\n              </Placeholder.Header>\r\n              <Placeholder.Paragraph>\r\n                <Placeholder.Line />\r\n              </Placeholder.Paragraph>\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment>\r\n            <Placeholder>\r\n              <Placeholder.Line />\r\n              <Placeholder.Line />\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment secondary style={{ minHeight: 70 }} />\r\n          <Segment clearing>\r\n            <Button disabled color='blue' floated='right' content='View' />\r\n          </Segment>\r\n        </Segment.Group>\r\n      </Placeholder>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default ActivityListItemPlaceholder;","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\n//import ActivityList from \"./ActivityList\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadActivities,\r\n    loadingInitial,\r\n    setPage,\r\n    page,\r\n    totalPages\r\n  } = rootStore.activityStore;\r\n\r\n  // add local state so we can track loading of the next batch of activities\r\n  const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n  const handleGetNext = () => {\r\n    setLoadingNext(true);\r\n    setPage(page + 1);\r\n    loadActivities().then(() => setLoadingNext(false));\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadActivities();\r\n  }, [loadActivities]); // 2nd param ensure that useEffect runs one time only. Every time our component renders, our UseEffect would be called otherwise (this is the dependency array) - componentDidMount equivalent\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        {loadingInitial && page === 0 ? (\r\n          <ActivityListItemPlaceholder />\r\n        ) : (\r\n          <InfiniteScroll\r\n            pageStart={0}\r\n            loadMore={handleGetNext}\r\n            hasMore={!loadingNext && page + 1 < totalPages}\r\n            initialLoad={false}\r\n          >\r\n            <ActivityList />\r\n          </InfiniteScroll>\r\n        )}\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <ActivityFilters />\r\n      </Grid.Column>\r\n      <Grid.Column width={10}>\r\n        <Loader active={loadingNext} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDashboard);\r\n","import React from 'react'\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLInputElement>, FormFieldProps {}\r\n\r\nconst TextInput: React.FC<IProps> = ({\r\n    input, \r\n    width, \r\n    type, \r\n    placeholder, \r\n    meta: {touched, error}\r\n}) => {\r\n    return ( \r\n        <Form.Field error={touched && !!error} type={type} width={width}>\r\n            <input {...input} placeholder={placeholder} />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default TextInput;","import React from 'react';\r\nimport { AxiosResponse } from 'axios';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    error: AxiosResponse,\r\n    text: string\r\n};\r\n\r\nconst ErrorMessage: React.FC<IProps> = ({error, text}) => {\r\n    return (\r\n        <Message error>\r\n            <Message.Header>{error.statusText}</Message.Header>\r\n            {error.data && Object.keys(error.data.errors).length > 0 && (\r\n                <Message.List>\r\n                    {Object.values(error.data.errors).flat().map((err, i) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n            {text && <Message.Content content={text}/>}\r\n        </Message>\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;","import React, { useContext } from 'react'\r\nimport {Form as FinalForm, Field} from 'react-final-form';\r\nimport TextInput from '../../app/common/form/TextInput';\r\nimport { Form, Button, Header } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport { IUserFormValues } from '../../app/models/user';\r\nimport { FORM_ERROR } from 'final-form';import { combineValidators, isRequired } from 'revalidate';\r\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\r\n\r\nconst validate = combineValidators({\r\n    email: isRequired('email'),\r\n    password: isRequired('password')\r\n});\r\n\r\nconst LoginForm = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {login} = rootStore.userStore;\r\n    return (\r\n        <FinalForm\r\n            onSubmit={(values: IUserFormValues) => login(values).catch(error => ({\r\n                [FORM_ERROR]: error\r\n            }))}\r\n            validate={validate}\r\n            render={({ handleSubmit, submitting, submitError, invalid, pristine, dirtySinceLastSubmit }) => (\r\n                <Form onSubmit={handleSubmit} error>\r\n                    <Header \r\n                        as='h2' \r\n                        content='Login to Reactivities' \r\n                        color='teal' \r\n                        textAlign='center' />\r\n                    <Field\r\n                        name='email'\r\n                        component={TextInput}\r\n                        placeholder='Email'\r\n                     />\r\n                    <Field\r\n                        name='password'\r\n                        component={TextInput}\r\n                        placeholder='Password'\r\n                        type='password'\r\n                     />\r\n                     {submitError && !dirtySinceLastSubmit && (\r\n                         <ErrorMessage \r\n                            error={submitError}\r\n                            text='Invalid email or password'\r\n                        />\r\n                     )}\r\n                     <Button disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n                      loading={submitting} \r\n                      color='teal'\r\n                      content='Login'\r\n                      fluid\r\n                      />\r\n                </Form>\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import React, { useContext } from 'react'\r\nimport {Form as FinalForm, Field} from 'react-final-form';\r\nimport TextInput from '../../app/common/form/TextInput';\r\nimport { Form, Button, Header } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport { IUserFormValues } from '../../app/models/user';\r\nimport { FORM_ERROR } from 'final-form';import { combineValidators, isRequired } from 'revalidate';\r\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\r\n\r\nconst validate = combineValidators({\r\n    username: isRequired('username'),\r\n    displayName: isRequired('display name'),\r\n    email: isRequired('email'),\r\n    password: isRequired('password')\r\n});\r\n\r\nconst RegisterForm = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {register} = rootStore.userStore;\r\n    return (\r\n        <FinalForm\r\n            onSubmit={(values: IUserFormValues) => register(values).catch(error => ({\r\n                [FORM_ERROR]: error\r\n            }))}\r\n            validate={validate}\r\n            render={({ handleSubmit, submitting, submitError, invalid, pristine, dirtySinceLastSubmit }) => (\r\n                <Form onSubmit={handleSubmit} error>\r\n                    <Header \r\n                        as='h2' \r\n                        content='Sign up to Reactivities' \r\n                        color='teal' \r\n                        textAlign='center' />\r\n                    <Field\r\n                        name='username'\r\n                        component={TextInput}\r\n                        placeholder='Username'\r\n                     />\r\n                    <Field\r\n                        name='displayName'\r\n                        component={TextInput}\r\n                        placeholder='Display Name'\r\n                     />\r\n                    <Field\r\n                        name='email'\r\n                        component={TextInput}\r\n                        placeholder='Email'\r\n                     />\r\n                    <Field\r\n                        name='password'\r\n                        component={TextInput}\r\n                        placeholder='Password'\r\n                        type='password'\r\n                     />\r\n                     {submitError && !dirtySinceLastSubmit && (\r\n                        <ErrorMessage \r\n                            error={submitError}\r\n                            text=''\r\n                        />\r\n                     )}\r\n                     <Button disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n                      loading={submitting} \r\n                      color='teal'\r\n                      content='Register'\r\n                      fluid\r\n                      />\r\n                </Form>\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default RegisterForm;","import React, { useContext, Fragment } from 'react';\r\nimport { Container, Segment, Header, Button, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport LoginForm from '../user/LoginForm';\r\nimport RegisterForm from '../user/RegisterForm';\r\n\r\nconst HomePage = () => {\r\n    const token =  window.localStorage.getItem('jwt');\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {isLoggedIn, user} = rootStore.userStore;\r\n    const {openModal} = rootStore.modalStore;\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead' >\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n            </Header>\r\n                {isLoggedIn && user && token ? (\r\n                    <Fragment>\r\n                        <Header as='h2' inverted content={`Welcome back ${user.displayName}`} />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go To activities!\r\n                        </Button>\r\n                    </Fragment>\r\n                ) : \r\n                (\r\n                    <Fragment>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button onClick={() => openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login\r\n                        </Button>\r\n                        <Button onClick={() => openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                    </Fragment>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default HomePage;","export interface IActivitiesEnvelope {\r\n    activities: IActivity[];\r\n    activityCount: number;\r\n};\r\n\r\nexport interface IActivity {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date;\r\n    city: string;\r\n    venue: string;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    attendees: IAttendee[];\r\n    comments: IComment[];\r\n};\r\n\r\nexport interface IComment {\r\n    id: string;\r\n    createdAt: Date;\r\n    body: string;\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n}\r\n\r\nexport interface IActivityFormValues extends Partial<IActivity> { // allows undefined for values\r\n    time?: Date\r\n};\r\n\r\nexport class ActivityFormValues implements IActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date?: Date = undefined;\r\n    time?: Date = undefined;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(init?: IActivityFormValues){\r\n        if(init && init.date){\r\n            //runInAction(() => {\r\n                init.time = init.date;\r\n            //});\r\n        }\r\n        Object.assign(this, init); // automatically maps\r\n    }\r\n};\r\n\r\nexport interface IAttendee {\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n    isHost: boolean;\r\n    following?: boolean;\r\n};","import React from 'react'\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLTextAreaElement>, FormFieldProps {}\r\n\r\nconst TextAreaInput: React.FC<IProps> = ({\r\n    input, \r\n    width, \r\n    rows,\r\n    placeholder, \r\n    meta: {touched, error}\r\n}) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n            <textarea rows={rows} {...input} placeholder={placeholder} />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default TextAreaInput;","import React from 'react'\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLSelectElement>, FormFieldProps {}\r\n\r\nconst SelectInput: React.FC<IProps> = ({\r\n    input, \r\n    width, \r\n    options,\r\n    placeholder, \r\n    meta: {touched, error}\r\n}) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n            <Select\r\n                value={input.value}\r\n                onChange={(e, data) => input.onChange(data.value)}\r\n                placeholder={placeholder}\r\n                options={options}\r\n            />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    )\r\n};\r\n\r\nexport default SelectInput;","export const category = [\r\n    { key: 'drinks', text: 'Drinks', value: 'drinks' },\r\n    { key: 'culture', text: 'Culture', value: 'culture' },\r\n    { key: 'film', text: 'Film', value: 'film' },\r\n    { key: 'food', text: 'Food', value: 'food' },\r\n    { key: 'music', text: 'Music', value: 'music' },\r\n    { key: 'travel', text: 'Travel', value: 'travel' }\r\n  ];","import React from 'react'\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\nimport { DateTimePicker } from 'react-widgets';\r\n\r\ninterface IProps extends FieldRenderProps<Date, HTMLInputElement>, FormFieldProps {}\r\n\r\nconst DateInput: React.FC<IProps> = ({\r\n    input, \r\n    width, \r\n    placeholder,\r\n    date = false,\r\n    time = false,\r\n    meta: {touched, error},\r\n    ...rest\r\n}) => {\r\n    return ( \r\n        <Form.Field error={touched && !!error} width={width}>\r\n        <DateTimePicker\r\n            placeholder={placeholder}\r\n            value={input.value || null}\r\n            onChange={input.onChange}\r\n            onBlur={input.onBlur}\r\n            onKeyDown={(e) => e.preventDefault()}\r\n            date={date}\r\n            time={time}\r\n            {...rest}\r\n        />\r\n        {touched && error && (\r\n            <Label basic color='red'>\r\n                {error}\r\n            </Label>\r\n        )}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default DateInput;","import React, { useState, useContext, useEffect } from 'react'\r\nimport { Segment, Form, Button, Grid } from 'semantic-ui-react'\r\nimport { ActivityFormValues } from '../../../app/models/activity'\r\nimport { v4 as uuid } from 'uuid';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport {Form as FinalForm, Field} from 'react-final-form';\r\nimport TextInput from '../../../app/common/form/TextInput';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport SelectInput from '../../../app/common/form/SelectInput';\r\nimport { category } from '../../../app/common/options/categoryOptions';\r\nimport DateInput from '../../../app/common/form/DateInput';\r\nimport { combineDateAndTime } from '../../../app/common/util/util';\r\nimport {combineValidators, isRequired, composeValidators, hasLengthGreaterThan} from 'revalidate';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\n\r\nconst validate = combineValidators({\r\n    title: isRequired({message: 'The event title is required'}),\r\n    category: isRequired('Category'),\r\n    description: composeValidators(\r\n        isRequired('Description'),\r\n        hasLengthGreaterThan(4)({message: 'Description needs to be at least 5 characters'})\r\n    )(),\r\n    city: isRequired('City'),\r\n    venue: isRequired('Venue'),\r\n    date: isRequired('Date'),\r\n    time: isRequired('Time')\r\n});\r\n\r\ninterface DetailParams {\r\n    id: string;\r\n}\r\n\r\n\r\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({ match, history }) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { createActivity, editActivity, submitting, loadActivity, clearActivity } = rootStore.activityStore;\r\n\r\n    const [activity, setActivity] = useState(new ActivityFormValues());\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => { // equivalent to componentDidMount, componentDidUpdate, componentWillUnmount\r\n        if (match.params.id) {\r\n            setLoading(true);\r\n            loadActivity(match.params.id)\r\n                .then((activity) => setActivity(new ActivityFormValues(activity)))\r\n                .finally(() => setLoading(false));\r\n        }\r\n    }, [\r\n        loadActivity, // runs only if loadActivity has changed\r\n        match.params.id // runs onli if match.params.id has changed\r\n    ]);\r\n\r\n    const handleFinalFormSubmit = (values: any) => {\r\n        const dateAndTime = combineDateAndTime(values.date, values.time);\r\n        const {date, time, ...activity} = values;\r\n        activity.date = dateAndTime;\r\n        \r\n        if (!activity.id) { // check if we have an activity id\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n            createActivity(newActivity);\r\n        }\r\n        else {\r\n            editActivity(activity);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <Segment clearing>\r\n                    <FinalForm\r\n                        validate={validate}\r\n                        initialValues={activity}\r\n                        onSubmit={handleFinalFormSubmit}\r\n                        render={({handleSubmit, invalid, pristine}) => (\r\n                            <Form onSubmit={handleSubmit} loading={loading}>\r\n                                <Field name='title' placeholder='Title' value={activity.title} component={TextInput} />\r\n                                <Field name='description' placeholder='Description' rows={3} value={activity.description} component={TextAreaInput} />\r\n                                <Field name='category' placeholder='Category' value={activity.category} component={SelectInput} options={category} />\r\n                                <Form.Group widths='equal'>\r\n                                    <Field component={DateInput} name='date' date={true} placeholder='Date' value={activity.date} />\r\n                                    <Field component={DateInput} name='time' time={true} placeholder='Time' value={activity.time} />\r\n                                </Form.Group>\r\n                                <Field name='city' placeholder='City' value={activity.city} component={TextInput} />\r\n                                <Field name='venue' placeholder='Venue' value={activity.venue} component={TextInput} />\r\n                                <Button disabled={loading || invalid || pristine} loading={submitting} floated='right' positive type='submit' content='Submit' />\r\n                                <Button disabled={loading} onClick={activity.id ? () => history.push(`/activities/${activity.id}`) : () => history.push('/activities')} floated='right' type='button' content='Cancel' />\r\n                             </Form>\r\n                    )}\r\n                    />\r\n                </Segment>\r\n            </Grid.Column>\r\n        </Grid>\r\n        )\r\n}\r\n\r\nexport default observer(ActivityForm);","import React, { useContext } from \"react\";\r\nimport { Segment, Item, Header, Button, Image } from \"semantic-ui-react\";\r\nimport { IActivity } from \"../../../app/models/activity\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { format } from \"date-fns\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst activityImageStyle = {\r\n  filter: \"brightness(30%)\"\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n  position: \"absolute\",\r\n  bottom: \"5%\",\r\n  left: \"5%\",\r\n  width: \"100%\",\r\n  height: \"auto\",\r\n  color: \"white\"\r\n};\r\n\r\nconst ActivityDetailedHeader: React.FC<{ activity: IActivity }> = ({\r\n  activity\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { attendActivity, cancelAttendance, loading } = rootStore.activityStore;\r\n  const host = activity.attendees.filter(x => x.isHost)[0];\r\n  return (\r\n    <Segment.Group>\r\n      <Segment basic attached=\"top\" style={{ padding: \"0\" }}>\r\n        <Image\r\n          src={`/assets/categoryImages/${activity.category}.jpg`}\r\n          fluid\r\n          style={activityImageStyle}\r\n        />\r\n        <Segment basic style={activityImageTextStyle}>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Content>\r\n                <Header\r\n                  size=\"huge\"\r\n                  content={activity.title}\r\n                  style={{ color: \"white\" }}\r\n                />\r\n                <p>{format(activity.date, \"eeee do MMMM\")}</p>\r\n                <p>\r\n                  Hosted by <Link to={`/profile/${host.username}`}><strong>{host.displayName}</strong></Link>\r\n                </p>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Segment>\r\n      </Segment>\r\n      <Segment clearing attached=\"bottom\">\r\n        {activity.isHost ? (\r\n          <Button\r\n            as={Link}\r\n            to={`/manage/${activity.id}`}\r\n            color=\"orange\"\r\n            floated=\"right\"\r\n          >\r\n            Manage Event\r\n          </Button>\r\n        ) : activity.isGoing ? (\r\n          <Button loading={loading} onClick={cancelAttendance}>\r\n            Cancel attendance\r\n          </Button>\r\n        ) : (\r\n          <Button loading={loading} onClick={attendActivity} color=\"teal\">\r\n            Join Activity\r\n          </Button>\r\n        )}\r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetailedHeader);\r\n","import React from \"react\";\r\nimport { Segment, Grid, Icon } from \"semantic-ui-react\";\r\nimport { IActivity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\n\r\nconst ActivityDetailedInfo: React.FC<{ activity: IActivity }> = ({ activity }) => {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date, 'eeee do MMMM')} at {format(activity.date, 'h:mm a')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default ActivityDetailedInfo;","import React, { Fragment, useContext, useEffect } from \"react\";\r\nimport { Segment, Header, Form, Comment, Button } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\r\nimport { observer } from \"mobx-react-lite\";\r\n//import { formatDistance } from \"date-fns\";\r\n\r\nconst ActivityDetailedChat = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createHubConnection,\r\n    stopHubConnection,\r\n    addComment,\r\n    activity\r\n  } = rootStore.activityStore;\r\n\r\n  useEffect(() => {\r\n    console.log(\"CREATING HUB CONNECTION\");\r\n    createHubConnection(activity!.id);\r\n    return () => {\r\n      // This gets called when component unmounts (when navigate away)\r\n        stopHubConnection();\r\n    };\r\n  }, [createHubConnection, stopHubConnection ]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        attached=\"top\"\r\n        inverted\r\n        color=\"teal\"\r\n        style={{ border: \"none\" }}\r\n      >\r\n        <Header>Chat about this event</Header>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Comment.Group>\r\n          {activity &&\r\n            activity.comments &&\r\n            activity.comments.map(comment => (\r\n              <Comment key={comment.id}>\r\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\r\n                <Comment.Content>\r\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\r\n                    {comment.displayName}\r\n                  </Comment.Author>\r\n                  <Comment.Metadata>\r\n                    <div>{comment.createdAt}</div>\r\n                  </Comment.Metadata>\r\n                  <Comment.Text>{comment.body}</Comment.Text>\r\n                </Comment.Content>\r\n              </Comment>\r\n            ))}\r\n          <FinalForm\r\n            onSubmit={addComment}\r\n            render={({ handleSubmit, submitting, form }) => (\r\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\r\n                <Field\r\n                  name=\"body\"\r\n                  component={TextAreaInput}\r\n                  rows={2}\r\n                  placeholder=\"Add your comment\"\r\n                />\r\n                <Button\r\n                  content=\"Add Reply\"\r\n                  labelPosition=\"left\"\r\n                  icon=\"edit\"\r\n                  primary\r\n                  loading={submitting}\r\n                />\r\n              </Form>\r\n            )}\r\n          />\r\n        </Comment.Group>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetailedChat);\r\n","import React, { Fragment } from \"react\";\r\nimport { Segment, List, Label, Item, Image } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IAttendee } from \"../../../app/models/activity\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\ninterface IProps {\r\n  attendees: IAttendee[];\r\n}\r\n\r\nconst ActivityDetailedSidebar: React.FC<IProps> = ({ attendees }) => {\r\n\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        style={{ border: \"none\" }}\r\n        attached=\"top\"\r\n        secondary\r\n        inverted\r\n        color=\"teal\"\r\n      >\r\n        {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} going\r\n      </Segment>\r\n      <Segment attached>\r\n        <List relaxed divided>\r\n          {attendees.map(attendee => (\r\n            <Item key={attendee.username} style={{ position: \"relative\" }}>\r\n              {attendee.isHost && (\r\n                <Label\r\n                  style={{ position: \"absolute\" }}\r\n                  color=\"orange\"\r\n                  ribbon=\"right\"\r\n                >\r\n                  Host\r\n                </Label>\r\n              )}\r\n              <Image size=\"tiny\" src={attendee.image || \"/assets/user.png\"} />\r\n              <Item.Content verticalAlign=\"middle\">\r\n                <Item.Header as=\"h3\">\r\n                  <Link to={`/profile/${attendee.username}`}>\r\n                    {attendee.displayName}\r\n                  </Link>\r\n                </Item.Header>\r\n                {attendee.following &&\r\n                <Item.Extra style={{ color: \"orange\" }}>Following</Item.Extra>}\r\n              </Item.Content>\r\n            </Item>\r\n          ))}\r\n        </List>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetailedSidebar);\r\n","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\r\n    inverted = true,\r\n    content\r\n}) => {\r\n    return (\r\n        <Dimmer active inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    );\r\n};\r\n\r\nexport default LoadingComponent;","import React, { useContext, useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\n\r\ninterface DetailParams {\r\n    id: string;\r\n}\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({ match, history }) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { activity, loadActivity, loadingInitial } = rootStore.activityStore;\r\n\r\n    // do something when component mounts\r\n    useEffect(() => {\r\n        loadActivity(match.params.id); // run once when mounting component, so pass array of dependencies\r\n    }, [loadActivity, match.params.id, history ]);\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />;\r\n\r\n    if(!activity)\r\n    {\r\n        return <h2>Activity not found</h2>\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar attendees={activity.attendees} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails);","import React from 'react';\r\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere but couldn't find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to Activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React, { useContext } from 'react'\r\nimport { Modal } from 'semantic-ui-react'\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ModalContainer = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {modal: {open, body}, closeModal} = rootStore.modalStore;\r\n    return (\r\n        <Modal open={open} onClose={closeModal} size='mini'>\r\n            <Modal.Content>{body}</Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default observer(ModalContainer);","import React from \"react\";\r\nimport {\r\n  Segment,\r\n  Item,\r\n  Header,\r\n  Button,\r\n  Grid,\r\n  Statistic,\r\n  Divider,\r\n  Reveal\r\n} from \"semantic-ui-react\";\r\nimport { IProfile } from \"../../app/models/profile\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\ninterface IProps {\r\n  profile: IProfile;\r\n  isCurrentUser: boolean;\r\n  loading: boolean;\r\n  follow: (username: string) => void;\r\n  unfollow: (username: string) => void;\r\n}\r\n\r\nconst ProfileHeader: React.FC<IProps> = ({\r\n  profile,\r\n  isCurrentUser,\r\n  loading,\r\n  follow,\r\n  unfollow\r\n}) => {\r\n  return (\r\n    <Segment>\r\n      <Grid>\r\n        <Grid.Column width={12}>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Image\r\n                avatar\r\n                size=\"small\"\r\n                src={profile.image || \"/assets/user.png\"}\r\n              />\r\n              <Item.Content verticalAlign=\"middle\">\r\n                <Header as=\"h1\">{profile.displayName}</Header>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Grid.Column>\r\n        <Grid.Column width={4}>\r\n          <Statistic.Group widths={2}>\r\n            <Statistic label=\"Followers\" value={profile.followersCount} />\r\n            <Statistic label=\"Following\" value={profile.followingCount} />\r\n          </Statistic.Group>\r\n          <Divider />\r\n          {!isCurrentUser && (\r\n            <Reveal animated=\"move\">\r\n              <Reveal.Content visible style={{ width: \"100%\" }}>\r\n                <Button\r\n                  fluid\r\n                  color=\"teal\"\r\n                  content={profile.following ? \"Following\" : \"Not following\"}\r\n                />\r\n              </Reveal.Content>\r\n              <Reveal.Content hidden>\r\n                <Button\r\n                  fluid\r\n                  basic\r\n                  loading={loading}\r\n                  color={profile.following ? \"red\" : \"green\"}\r\n                  content={profile.following ? \"Unfollow\" : \"Follow\"}\r\n                  onClick={\r\n                    profile.following\r\n                      ? () => unfollow(profile.userName)\r\n                      : () => follow(profile.userName)\r\n                  }\r\n                />\r\n              </Reveal.Content>\r\n            </Reveal>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileHeader);\r\n","import React, { useCallback } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Icon, Header } from \"semantic-ui-react\";\r\n\r\ninterface IProps {\r\n  setFiles: (files: object[]) => void;\r\n}\r\n\r\nconst dropzoneStyles = {\r\n  border: \"dashed 3px\",\r\n  borderColor: \"#eee\",\r\n  borderRadius: \"5px\",\r\n  paddingTop: \"30px\",\r\n  textAlign: \"center\" as 'center',\r\n  height: \"200px\"\r\n};\r\n\r\nconst dropzoneActive = {\r\n  borderColor: \"green\"\r\n};\r\n\r\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(\r\n      acceptedFiles.map((file: object) =>\r\n        Object.assign(file, {\r\n          preview: URL.createObjectURL(file)\r\n        })\r\n      )\r\n    );\r\n    // Do something with the files\r\n  }, [setFiles]);\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <div\r\n      {...getRootProps()}\r\n      style={\r\n        isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles\r\n      }\r\n    >\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhotoWidgetDropzone;\r\n","import React, { useRef } from \"react\";\r\nimport Cropper from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\"; // see installation section above for versions of NPM older than 3.0.0\r\n\r\ninterface IProps {\r\n  setImage: (file: Blob) => void;\r\n  imagePreview: string;\r\n}\r\n\r\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\r\n  const cropper = useRef<Cropper>(null);\r\n\r\n  const cropImage = () => {\r\n    if (\r\n      cropper.current &&\r\n      typeof cropper.current.getCroppedCanvas() === \"undefined\"\r\n    ) {\r\n      return;\r\n    }\r\n    cropper &&\r\n      cropper.current &&\r\n      cropper.current.getCroppedCanvas().toBlob((blob: any) => {\r\n        setImage(blob);\r\n      }, \"image/jpeg\");\r\n  };\r\n\r\n  return (\r\n    <Cropper\r\n      ref={cropper}\r\n      src={imagePreview}\r\n      style={{ height: 200, width: \"100%\" }}\r\n      // Cropper.js options\r\n      aspectRatio={1 / 1}\r\n      preview=\".img-preview\"\r\n      guides={false}\r\n      viewMode={1}\r\n      dragMode=\"move\"\r\n      scalable={true}\r\n      cropBoxMovable={true}\r\n      cropBoxResizable={true}\r\n      crop={cropImage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PhotoWidgetCropper;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Header, Grid, Button } from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\n\r\ninterface IProps {\r\n  loading: boolean;\r\n  uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nconst PhotoUploadWidget: React.FC<IProps> = ({ loading, uploadPhoto }) => {\r\n  // Want local state\r\n  const [files, setFiles] = useState<any[]>([]);\r\n  const [image, setImage] = useState<Blob | null>(null);\r\n\r\n  // Clean up if user navigates away. (Unmount)\r\n  useEffect(() => {\r\n    return () => {\r\n      files.forEach(file => URL.revokeObjectURL(file.preview));\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid>\r\n        <Grid.Row />\r\n        <Grid.Column width={4}>\r\n          <Header color=\"teal\" sub content=\"Step 1 - Add Photo\" />\r\n          <PhotoWidgetDropzone setFiles={setFiles} />\r\n        </Grid.Column>\r\n        <Grid.Column width={1} />\r\n        <Grid.Column width={4}>\r\n          <Header sub color=\"teal\" content=\"Step 2 - Resize image\" />\r\n          {files.length > 0 && (\r\n            <PhotoWidgetCropper\r\n              setImage={setImage}\r\n              imagePreview={files[0].preview}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={1} />\r\n        <Grid.Column width={4}>\r\n          <Header sub color=\"teal\" content=\"Step 3 - Preview & Upload\" />\r\n          {files.length > 0 && (\r\n            <Fragment>\r\n              <div\r\n                className=\"img-preview\"\r\n                style={{ minHeight: \"200px\", overflow: \"hidden\" }}\r\n              />\r\n              <Button.Group widths={2}>\r\n                <Button\r\n                  positive\r\n                  icon=\"check\"\r\n                  loading={loading}\r\n                  onClick={() => uploadPhoto(image!)}\r\n                />\r\n                <Button\r\n                  icon=\"close\"\r\n                  disabled={loading}\r\n                  onClick={() => setFiles([])}\r\n                />\r\n              </Button.Group>\r\n            </Fragment>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(PhotoUploadWidget);\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Tab, Header, Card, Image, Button, Grid } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport PhotoUploadWidget from \"../../app/common/photoUpload/PhotoUploadWidget\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nexport const ProfilePhotos = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    profile,\r\n    isCurrentUser,\r\n    uploadPhoto,\r\n    uploadingPhoto,\r\n    setMainPhoto,\r\n    deletePhoto,\r\n    loading\r\n  } = rootStore.profileStore;\r\n\r\n  // add local state to toggle\r\n  const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n\r\n  const [target, setTarget] = useState<string | undefined>(undefined);\r\n\r\n  const [deleteTarget, setDeleteTarget] = useState<string | undefined>(\r\n    undefined\r\n  );\r\n\r\n  const handleUploadImage = (photo: Blob) => {\r\n    uploadPhoto(photo).then(() => setAddPhotoMode(false));\r\n  };\r\n\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16} style={{ paddingBottom: 0 }}>\r\n          <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated=\"right\"\r\n              basic\r\n              content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\r\n              onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          {addPhotoMode ? (\r\n            <PhotoUploadWidget\r\n              uploadPhoto={handleUploadImage}\r\n              loading={uploadingPhoto}\r\n            />\r\n          ) : (\r\n            <Card.Group itemsPerRow={5}>\r\n              {profile &&\r\n                profile.photos.map(photo => (\r\n                  <Card key={photo.id}>\r\n                    <Image src={photo.url} />\r\n                    {isCurrentUser && (\r\n                      <Button.Group fluid widths={2}>\r\n                        <Button\r\n                          name={photo.id}\r\n                          onClick={e => {\r\n                            setMainPhoto(photo);\r\n                            setTarget(e.currentTarget.name);\r\n                          }}\r\n                          disabled={photo.isMain}\r\n                          loading={loading && target === photo.id}\r\n                          basic\r\n                          positive\r\n                          content=\"Main\"\r\n                        />\r\n                        <Button\r\n                          name={photo.id}\r\n                          disabled={photo.isMain}\r\n                          onClick={(e) => {\r\n                            deletePhoto(photo);\r\n                            setDeleteTarget(e.currentTarget.name)\r\n                          }}\r\n                          loading={loading && deleteTarget === photo.id}\r\n                          basic\r\n                          negative\r\n                          icon=\"trash\"\r\n                        />\r\n                      </Button.Group>\r\n                    )}\r\n                  </Card>\r\n                ))}\r\n            </Card.Group>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfilePhotos);\r\n","import React from \"react\";\r\nimport { IProfile } from \"../../app/models/profile\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { combineValidators, isRequired } from \"revalidate\";\r\nimport { Form, Button } from \"semantic-ui-react\";\r\nimport TextInput from \"../../app/common/form/TextInput\";\r\nimport TextAreaInput from \"../../app/common/form/TextAreaInput\";\r\n\r\nconst validate = combineValidators({\r\n  displayName: isRequired(\"displayName\")\r\n});\r\n\r\ninterface IProps {\r\n  updateProfile: (profile: Partial<IProfile>) => void;\r\n  profile: IProfile;\r\n}\r\n\r\nconst ProfileEditForm: React.FC<IProps> = ({ updateProfile, profile }) => {\r\n  return (\r\n    <FinalForm\r\n      onSubmit={updateProfile}\r\n      validate={validate}\r\n      initialValues={profile!}\r\n      render={({ handleSubmit, invalid, pristine, submitting }) => (\r\n        <Form onSubmit={handleSubmit} error>\r\n          <Field\r\n            name=\"displayName\"\r\n            component={TextInput}\r\n            placeholder=\"Display Name\"\r\n            value={profile!.displayName}\r\n          />\r\n          <Field\r\n            name=\"bio\"\r\n            component={TextAreaInput}\r\n            rows={3}\r\n            placeholder=\"Bio\"\r\n            value={profile!.bio}\r\n          />\r\n          <Button\r\n            loading={submitting}\r\n            floated=\"right\"\r\n            disabled={invalid || pristine}\r\n            positive\r\n            content=\"Update profile\"\r\n          />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default observer(ProfileEditForm);\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Tab, Grid, Header, Button } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst ProfileDescription = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { updateProfile, profile, isCurrentUser } = rootStore.profileStore;\r\n  const [editMode, setEditMode] = useState(false);\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header\r\n            floated=\"left\"\r\n            icon=\"user\"\r\n            content={`About ${profile!.displayName}`}\r\n          />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated=\"right\"\r\n              basic\r\n              content={editMode ? \"Cancel\" : \"Edit Profile\"}\r\n              onClick={() => setEditMode(!editMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          {editMode ? (\r\n            <ProfileEditForm updateProfile={updateProfile} profile={profile!} />\r\n          ) : (\r\n            <span>{profile!.bio}</span>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileDescription);","import React from \"react\";\r\nimport { Card, Image, Icon } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IProfile } from \"../../app/models/profile\";\r\n\r\ninterface IProps {\r\n    profile: IProfile\r\n};\r\n\r\nconst ProfileCard: React.FC<IProps> = ({ profile }) => {\r\n  return (\r\n    <Card as={Link} to={`/profile/${profile.userName}`}>\r\n      <Image src={profile.image || \"/assets/user.png\"} />\r\n      <Card.Content>\r\n        <Card.Header>{profile.displayName}</Card.Header>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <div>\r\n          <Icon name=\"user\" />\r\n          {profile.followersCount} Followers\r\n        </div>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ProfileCard;\r\n","import React, { useContext } from \"react\";\r\nimport { Tab, Grid, Header, Card } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nconst ProfileFollowings = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    profile,\r\n    followings,\r\n    //loadFollowings,\r\n    loading,\r\n    activeTab\r\n  } = rootStore.profileStore;\r\n\r\n  // temporary:\r\n  /*\r\n  useEffect(() => {\r\n    loadFollowings(\"following\");\r\n  }, [loadFollowings]);\r\n*/\r\n  return (\r\n    <Tab.Pane loading={loading}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header\r\n            floated=\"left\"\r\n            icon=\"user\"\r\n            content={\r\n              activeTab === 3\r\n                ? `People following ${profile!.displayName}`\r\n                : `People ${profile!.displayName} is following`\r\n            }\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Card.Group itemsPerRow={5}>\r\n            {followings.map(profile => (\r\n              <ProfileCard key={profile.userName} profile={profile} />\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default ProfileFollowings;\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IUserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\n\r\nconst panes = [\r\n  { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\r\n  { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\r\n  { menuItem: 'Hosting', pane: { key: 'hosted' } }\r\n];\r\n\r\nconst ProfileEvents = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadUserActivities,\r\n    profile,\r\n    loadingActivities,\r\n    userActivities\r\n  } = rootStore.profileStore!;\r\n\r\n  useEffect(() => {\r\n    loadUserActivities(profile!.userName);\r\n  }, [loadUserActivities, profile]);\r\n\r\n  const handleTabChange = (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    data: TabProps\r\n  ) => {\r\n    let predicate;\r\n    switch (data.activeIndex) {\r\n      case 1:\r\n        predicate = 'past';\r\n        break;\r\n      case 2:\r\n        predicate = 'hosting';\r\n        break;\r\n      default:\r\n        predicate = 'future';\r\n        break;\r\n    }\r\n    loadUserActivities(profile!.userName, predicate);\r\n  };\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingActivities}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='calendar' content={'Activities'} />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userActivities.map((activity: IUserActivity) => (\r\n              <Card\r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                key={activity.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: 'cover' }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                  <Card.Meta textAlign='center'>\r\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileEvents);","import React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\nimport ProfileDescription from \"./ProfileDescription\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\n\r\nconst panes = [\r\n  { menuItem: \"About\", render: () => <ProfileDescription /> },\r\n  { menuItem: \"Photos\", render: () => <ProfilePhotos /> },\r\n  {\r\n    menuItem: \"Activities\",\r\n    render: () => <ProfileActivities />\r\n  },\r\n  {\r\n    menuItem: \"Followers\",\r\n    render: () => <ProfileFollowings />\r\n  },\r\n  {\r\n    menuItem: \"Following\",\r\n    render: () => <ProfileFollowings />\r\n  }\r\n];\r\n\r\ninterface IProps {\r\n  setActiveTab: (activeIndex: any) => void;\r\n};\r\n\r\nexport const ProfileContent: React.FC<IProps> = ({ setActiveTab }) => {\r\n  return (\r\n    <Tab\r\n      menu={{ fluid: true, vertical: true }}\r\n      menuPosition=\"right\"\r\n      panes={panes}\r\n      onTabChange={(e, data) => setActiveTab(data.activeIndex)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProfileContent;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\ninterface RouteParams {\r\n  username: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> {}\r\n\r\nexport const ProfilePage: React.FC<IProps> = ({ match }) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadingProfile,\r\n    profile,\r\n    loadProfile,\r\n    follow,\r\n    unfollow,\r\n    isCurrentUser,\r\n    loading,\r\n    setActiveTab\r\n  } = rootStore.profileStore;\r\n\r\n  useEffect(() => {\r\n    loadProfile(match.params.username);\r\n  }, [loadProfile, match]);\r\n\r\n  if (loadingProfile) return <LoadingComponent content=\"Loading profile...\" />;\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={16}>\r\n        <ProfileHeader\r\n          profile={profile!}\r\n          isCurrentUser={isCurrentUser}\r\n          loading={loading}\r\n          follow={follow}\r\n          unfollow={unfollow}\r\n        />\r\n        <ProfileContent setActiveTab={setActiveTab} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ProfilePage);\r\n","import React, { useContext } from 'react';\r\nimport { RouteProps, RouteComponentProps, Route, Redirect } from 'react-router-dom';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>>\r\n};\r\n\r\nexport const PrivateRoute: React.FC<IProps> = ({ component: Component, ...rest}) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {isLoggedIn} = rootStore.userStore;\r\n    return (\r\n        <Route\r\n        {...rest}\r\n        render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to={'/'} />}\r\n         />\r\n    )\r\n};\r\n\r\nexport default observer(PrivateRoute);","import React, { Fragment, useContext, useEffect } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport NavBar from \"../../features/nav/NavBar\";\r\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport {\r\n  Route,\r\n  withRouter,\r\n  RouteComponentProps,\r\n  Switch\r\n} from \"react-router-dom\";\r\nimport HomePage from \"../../features/home/HomePage\";\r\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\r\nimport ActivityDetails from \"../../features/activities/details/ActivityDetails\";\r\nimport NotFound from \"./NotFound\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { RootStoreContext } from \"../stores/rootStore\";\r\nimport LoadingComponent from \"./LoadingComponent\";\r\nimport ModalContainer from \"../common/modals/ModalContainer\";\r\nimport ProfilePage from \"../../features/profiles/ProfilePage\";\r\nimport { PrivateRoute } from \"./PrivateRoute\";\r\n\r\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { setAppLoaded, token, appLoaded } = rootStore.commonStore;\r\n  const { getUser } = rootStore.userStore;\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      getUser().finally(() => setAppLoaded());\r\n    } else {\r\n      setAppLoaded();\r\n    }\r\n  }, [getUser, setAppLoaded, token]);\r\n\r\n  if (!appLoaded) {\r\n    return <LoadingComponent content=\"Loading app...\" />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <ModalContainer />\r\n      <ToastContainer position=\"bottom-right\" />\r\n      <Route exact path=\"/\" component={HomePage} />\r\n      <Route\r\n        path={\"/(.+)\"}\r\n        render={() => (\r\n          <Fragment>\r\n            <NavBar />\r\n            <Container style={{ marginTop: \"7em\" }}>\r\n              <Switch>\r\n                <PrivateRoute exact path=\"/activities\" component={ActivityDashboard} />\r\n                <PrivateRoute path=\"/activities/:id\" component={ActivityDetails} />\r\n                <PrivateRoute\r\n                  key={location.key}\r\n                  path={[\"/createActivity\", \"/manage/:id\"]}\r\n                  component={ActivityForm}\r\n                />{\" \"}\r\n                {/*Add location.key so that when props change inside this return, creates a new instance of whatever component is loading here */}\r\n                <PrivateRoute path=\"/profile/:username\" component={ProfilePage} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </Fragment>\r\n        )}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default withRouter(observer(App));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { useEffect } from \"react\"\r\nimport { withRouter } from \"react-router\";\r\n\r\n\r\nconst ScrollToTop = ({ children, location: { pathname } }: any) => {\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return children;\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\nimport dateFnsLocalizer from 'react-widgets-date-fns';\r\n\r\ndateFnsLocalizer();\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n    <Router history={history}>\r\n    <ScrollToTop>\r\n        <App />\r\n    </ScrollToTop>\r\n    </Router>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}